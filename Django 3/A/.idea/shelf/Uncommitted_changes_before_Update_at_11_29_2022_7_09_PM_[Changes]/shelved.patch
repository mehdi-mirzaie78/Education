Index: home/templates/home/bucket.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'base.html' %}\r\n\r\n{% block content %}\r\n\t<table class=\"table table-dark\">\r\n\t\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\">#</th>\r\n\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t<th scope=\"col\">Size</th>\r\n\t\t\t<th scope=\"col\">Download</th>\r\n\t\t\t<th scope=\"col\">Delete</th>\r\n\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody>\r\n\t\t{% for obj in objects %}\r\n\t\t\t<tr>\r\n\t\t\t\t<th scope=\"row\">{{ forloop.counter }}</th>\r\n\t\t\t\t<td>{{ obj.Key }}</td>\r\n\t\t\t\t<td>{{ obj.Size|filesizeformat }}</td>\r\n\t\t\t\t<td><a href=\"{% url 'home:download_obj_bucket' obj.Key %}\">download</a></td>\r\n\t\t\t\t<td><a href=\"{% url 'home:delete_obj_bucket' obj.Key %}\">delete</a></td>\r\n\t\t\t</tr>\r\n\t\t{% endfor %}\r\n\t\t</tbody>\r\n\t</table>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/templates/home/bucket.html b/home/templates/home/bucket.html
--- a/home/templates/home/bucket.html	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/home/templates/home/bucket.html	(date 1669736086468)
@@ -17,7 +17,7 @@
 				<th scope="row">{{ forloop.counter }}</th>
 				<td>{{ obj.Key }}</td>
 				<td>{{ obj.Size|filesizeformat }}</td>
-				<td><a href="{% url 'home:download_obj_bucket' obj.Key %}">download</a></td>
+				<td><a href="#">download</a></td>
 				<td><a href="{% url 'home:delete_obj_bucket' obj.Key %}">delete</a></td>
 			</tr>
 		{% endfor %}
Index: home/tasks.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from bucket import bucket\r\nfrom celery import shared_task\r\n\r\n\r\n# TODO: Can by async?\r\ndef all_objects_task():\r\n    result = bucket.get_objects()\r\n    return result\r\n\r\n\r\n@shared_task\r\ndef delete_object_task(key):\r\n    bucket.delete_object(key)\r\n\r\n\r\n@shared_task\r\ndef download_object_task(key):\r\n    bucket.download_object(key)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/tasks.py b/home/tasks.py
--- a/home/tasks.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/home/tasks.py	(date 1669736086468)
@@ -11,8 +11,3 @@
 @shared_task
 def delete_object_task(key):
     bucket.delete_object(key)
-
-
-@shared_task
-def download_object_task(key):
-    bucket.download_object(key)
\ No newline at end of file
Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def send_otp_code(phone_number, code):\r\n    pass\r\n\r\n\r\n# TODO: Can you make it async?\r\n\"\"\"\r\nfrom kavenegar import *\r\n\r\ndef send_otp_code(phone_number, code):\r\n    API_KEY = ''\r\n    try:\r\n        api = KavenegarAPI(API_KEY)\r\n        params = {\r\n            'sender': '',\r\n            'receptor': phone_number,\r\n            'message': f'{code}کد تایید شما '\r\n        }\r\n        response = api.sms_send(params)\r\n        print(response)\r\n    except APIException as e:\r\n        print(e)\r\n    except HTTPException as e:\r\n        print(e)\r\n\"\"\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils.py b/utils.py
--- a/utils.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/utils.py	(date 1669736086471)
@@ -2,7 +2,6 @@
     pass
 
 
-# TODO: Can you make it async?
 """
 from kavenegar import *
 
Index: home/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, get_object_or_404, redirect\r\nfrom django.views import View\r\nfrom .models import Category, Product\r\nfrom . import tasks\r\nfrom django.contrib import messages\r\n\r\n\r\nclass HomeView(View):\r\n    def get(self, request):\r\n        products = Product.objects.filter(available=True)\r\n        return render(request, 'home/home.html', {'products': products})\r\n\r\n\r\nclass ProductDetailView(View):\r\n    def get(self, request, slug):\r\n        product = get_object_or_404(Product, slug=slug)\r\n        return render(request, 'home/detail.html', {'product': product})\r\n\r\n\r\nclass BucketHome(View):\r\n    template_name = 'home/bucket.html'\r\n\r\n    def get(self, request):\r\n        objects = tasks.all_objects_task()\r\n        return render(request, self.template_name, {'objects': objects})\r\n\r\n\r\nclass DeleteBucketObject(View):\r\n\r\n    def get(self, request, key):\r\n        tasks.delete_object_task.delay(key)\r\n        messages.success(request, 'your object will be deleted soon', 'info')\r\n        return redirect('home:bucket')\r\n\r\n\r\nclass DownloadBucketObject(View):\r\n\r\n    def get(self, request, key):\r\n        tasks.download_object_task.delay(key)\r\n        messages.success(request, 'Download will be started soon', 'info')\r\n        return redirect('home:bucket')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/views.py b/home/views.py
--- a/home/views.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/home/views.py	(date 1669736086470)
@@ -31,11 +31,3 @@
         tasks.delete_object_task.delay(key)
         messages.success(request, 'your object will be deleted soon', 'info')
         return redirect('home:bucket')
-
-
-class DownloadBucketObject(View):
-
-    def get(self, request, key):
-        tasks.download_object_task.delay(key)
-        messages.success(request, 'Download will be started soon', 'info')
-        return redirect('home:bucket')
\ No newline at end of file
Index: home/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path, include\r\nfrom . import views\r\n\r\napp_name = 'home'\r\n\r\nbucket_urls = [\r\n    path('', views.BucketHome.as_view(), name='bucket'),\r\n    path('delete_obj/<str:key>/', views.DeleteBucketObject.as_view(), name='delete_obj_bucket'),\r\n    path('download_obj/<str:key>/', views.DownloadBucketObject.as_view(), name='download_obj_bucket'),\r\n\r\n]\r\n\r\nurlpatterns = [\r\n    path('', views.HomeView.as_view(), name='home'),\r\n    path('bucket/', include(bucket_urls)),\r\n    path('<slug:slug>/', views.ProductDetailView.as_view(), name='product_detail')\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/urls.py b/home/urls.py
--- a/home/urls.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/home/urls.py	(date 1669736086469)
@@ -5,9 +5,7 @@
 
 bucket_urls = [
     path('', views.BucketHome.as_view(), name='bucket'),
-    path('delete_obj/<str:key>/', views.DeleteBucketObject.as_view(), name='delete_obj_bucket'),
-    path('download_obj/<str:key>/', views.DownloadBucketObject.as_view(), name='download_obj_bucket'),
-
+    path('delete_obj_bucket/<str:key>/', views.DeleteBucketObject.as_view(), name='delete_obj_bucket'),
 ]
 
 urlpatterns = [
Index: bucket.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import boto3\r\nfrom django.conf import settings\r\n\r\n\r\nclass Bucket:\r\n    \"\"\"CDN Bucket manager\r\n    init method creates a connection.\r\n\r\n    NOTE:\r\n        none of these methods are async. Use public interface in tasks.py modules instead.\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        session = boto3.session.Session()\r\n        self.conn = session.client(\r\n            service_name=settings.AWS_SERVICE_NAME,\r\n            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,\r\n            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,\r\n            endpoint_url=settings.AWS_S3_ENDPOINT_URL,\r\n        )\r\n\r\n    def get_objects(self):\r\n        result = self.conn.list_objects_v2(Bucket=settings.AWS_STORAGE_BUCKET_NAME)\r\n        if result['KeyCount']:\r\n            return result['Contents']\r\n        return None\r\n\r\n    def delete_object(self, key):\r\n        self.conn.delete_object(Bucket=settings.AWS_STORAGE_BUCKET_NAME, Key=key)\r\n        return True\r\n\r\n    def download_object(self, key):\r\n        with open(settings.AWS_LOCAL_STORAGE + key, 'wb') as f:\r\n            self.conn.download_fileobj(settings.AWS_STORAGE_BUCKET_NAME, key, f)\r\n\r\n    # TODO: Define upload method for Bucket class.\r\n    # def upload_object(self, filename):\r\n    #     self.conn.upload_file(filename, settings.AWS_STORAGE_BUCKET_NAME, filename)\r\n\r\n\r\nbucket = Bucket()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bucket.py b/bucket.py
--- a/bucket.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/bucket.py	(date 1669736086393)
@@ -29,13 +29,5 @@
         self.conn.delete_object(Bucket=settings.AWS_STORAGE_BUCKET_NAME, Key=key)
         return True
 
-    def download_object(self, key):
-        with open(settings.AWS_LOCAL_STORAGE + key, 'wb') as f:
-            self.conn.download_fileobj(settings.AWS_STORAGE_BUCKET_NAME, key, f)
-
-    # TODO: Define upload method for Bucket class.
-    # def upload_object(self, filename):
-    #     self.conn.upload_file(filename, settings.AWS_STORAGE_BUCKET_NAME, filename)
-
 
 bucket = Bucket()
Index: A/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for A project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.1.3.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-4fav92^u5$6)%)czn&l$8^at=)i^&i_mx-ve%=+g&-4#_zzsi3'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'home.apps.HomeConfig',\r\n    'accounts.apps.AccountsConfig',\r\n    'storages',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'A.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates'],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'A.wsgi.application'\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\nSTATICFILES_DIRS = [\r\n    BASE_DIR / 'static'\r\n]\r\n\r\n# Media files\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = BASE_DIR / 'media'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nAUTH_USER_MODEL = 'accounts.User'\r\n\r\n# ARVAN CLOUD STORAGE\r\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\nAWS_ACCESS_KEY_ID = '44ee66a4-6fa4-40cb-bf7a-ce1d37d4c166'\r\nAWS_SECRET_ACCESS_KEY = '43b318540c8ffda6f086ed6843095f4d4feb48d97ca39eed2817fca761bb488b'\r\nAWS_S3_ENDPOINT_URL = 'https://s3.ir-thr-at1.arvanstorage.com'\r\nAWS_STORAGE_BUCKET_NAME = 'django-shop'\r\nAWS_SERVICE_NAME = 's3'\r\nAWS_S3_FILE_OVERWRITE = False\r\nAWS_LOCAL_STORAGE = f'{BASE_DIR}/aws/'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/A/settings.py b/A/settings.py
--- a/A/settings.py	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/A/settings.py	(date 1669736086389)
@@ -136,4 +136,3 @@
 AWS_STORAGE_BUCKET_NAME = 'django-shop'
 AWS_SERVICE_NAME = 's3'
 AWS_S3_FILE_OVERWRITE = False
-AWS_LOCAL_STORAGE = f'{BASE_DIR}/aws/'
Index: ../../.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\npip-wheel-metadata/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n.python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n/Django 3/A/aws
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.gitignore b/../../.gitignore
--- a/../../.gitignore	(revision 83050f9cf5992e17284198d46f6344bae332ccdf)
+++ b/../../.gitignore	(date 1669736086388)
@@ -127,4 +127,3 @@
 
 # Pyre type checker
 .pyre/
-/Django 3/A/aws
\ No newline at end of file
